name: Deploy

on:
  workflow_run:
    workflows: ["Development"] 
    types:
      - completed
    branches:
      - main 

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_RG: 'rg-gymapp-preview'
  APP_NAME: 'gymapp'
  REGISTRY_NAME: 'acrgymregistrypreview'

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    environment: Preview
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.GYMAPP_AZURE_CREDENTIALS }}
      - name: Bicep deployment
        id: bicepDeployment
        run: |
          az group create --name ${{env.AZURE_RG}} --location 'westeurope'
          az deployment group create --resource-group ${{ env.AZURE_RG }} --template-file ./infrastructure/main.bicep --parameters applicationName='${{ env.APP_NAME }}' --parameters containerRegistryName='${{ env.REGISTRY_NAME }}'
      - name: Get ACR name
        id: getacrname
        run: |
          acrName=$(az acr list --resource-group ${{ env.AZURE_RG }} --query "[0].name" -o tsv)
          echo "::set-output name=acrName::$acrName"

      - name: Get ACR Credentials
        id: getacrcreds
        run: |
          loginServer=$(az acr list --resource-group ${{ env.AZURE_RG }} --query "[0].loginServer" -o tsv)
          loginName=$(az acr credential show -n ${{ steps.getacrname.outputs.acrName }} --resource-group ${{ env.AZURE_RG }} --query username -o tsv)
          password=$(az acr credential show -n ${{ steps.getacrname.outputs.acrName }} --resource-group ${{ env.AZURE_RG }} --query "passwords[0].value" -o tsv)
          echo "::set-output name=loginServer::$loginServer"
          echo "::set-output name=loginName::$loginName"
          echo "::set-output name=password::$password"

      - name: 'Build and Push API Image to ACR'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.getacrcreds.outputs.loginServer }}
          username: ${{ steps.getacrname.outputs.acrName }}
          password: ${{ steps.getacrcreds.outputs.password }}
      - run: |
          docker build -f ./Dockerfile . -t ${{ steps.getacrcreds.outputs.loginServer }}/gymapi:${{ github.sha }}
          docker push ${{ steps.getacrcreds.outputs.loginServer }}/gymapi:${{ github.sha }}
          az containerapp update --name '${{ env.APP_NAME }}-api' --resource-group ${{ env.AZURE_RG }} --image ${{ steps.getacrcreds.outputs.loginServer }}/gymapi:${{ github.sha }}
